import React, { useEffect,useContext, useState } from 'react'
import {Link} from 'react-router-dom'
import * as R from 'ramda'


import useFetch from 'hooks/useFetch'
import TagList from 'components/tagList'
import {CurrentUserContext} from 'contexts/currentUser'
import { Fragment } from 'react'
// import Comments from 'components/Comments/index'


const Article = props => {
    const slug = props.match.params.slug
    const apiURL = `/articles/${slug}`
    

    const [{response: fetchArticleResponse,
            error: fetchArticleError, 
            isLoading: fetchArticleLoading
            },
            doFetch] = useFetch(apiURL)
    
    const [{response: deleteArticleResponse}, doDeleteArticle] = useFetch(apiURL)
    const [{response: fetchArticleResponseComments}, doFetchComments] = useFetch(`${apiURL}/comments`)
    const [isSuccessfull, setIsSuccesfull] = useState(false)
    const [currentUserState] = useContext(CurrentUserContext)
    const [body, setBody] =useState('')
    const [{response: fetchArticleResponseComments1}, doFetchComments1] = useFetch(`${apiURL}/comments`)
                
    console.log('fetchArticleResponseComment1', fetchArticleResponseComments1 && fetchArticleResponseComments1)
    

        

    const isAuthor = () => {
        if (!fetchArticleResponse || !currentUserState.isLogged)
        {
            return false
        }

        return (
            fetchArticleResponse.article.author.username === currentUserState.currentUser.username
        )
    }

    
    const deleteArticle = ()=> {
        doDeleteArticle({
            method: 'delete'
        }) 

            }
    const handleSubmit = event => {
                event.preventDefault()
                
                 doFetchComments({
                    method: 'post',
                    data: {
                        
                        body
                        
                    }
                })
               
                setIsSuccesfull(true)
               
            }   
            const Comments = () => {
                
            
                return (
                    <div>
                        {  fetchArticleResponseComments1 &&  fetchArticleResponseComments1.comments.map((comment,id) =>{
                           
                            const [{response: deleteArticleResponseComments}, doDeleteArticleComments] = useFetch(`${apiURL}/comments/${comment.id}`)
                           
                           
                            
                            
                const deleteArticleComments = () => {
            
                    doDeleteArticleComments({
                        method: 'delete'
                    }) 
                 } 

               
                
            
                 useEffect( async() => {
                    
                    if(!deleteArticleResponseComments && !isSuccessfull) {
                        return
                    }
                   
                                     
                    await doFetchComments()
                    
                        setIsSuccesfull(false)
                        setBody('')
                    
                    
                 
                },[deleteArticleResponseComments, isSuccessfull])
             
                
                 const isTime = () => {
                            
                    return (
                            new Date(Date.parse(comment.updatedAt))
                            ) 
                }       
                            return (
                                <div className='card' key ={id}>
                                        <div className='card-block'>
                                            <p className='card-text'>{comment.body}</p>
                                        </div>
                                        <div className='card-footer'>
                                            <Link to={`/profiles/${fetchArticleResponseComments1.comments[id].author.username}`} className='comment-author'>
                                                <img src={fetchArticleResponseComments1.comments[id].author.image} alt='' className='comment-author-img'/>
                    
                                            </Link>
                                            &nbsp;
                                            <Link className='comment-author' to={`/profiles/${fetchArticleResponseComments1.comments[id].author.username}`}>{fetchArticleResponseComments1.comments[id].author.username}</Link>
                                            <span className='date-posted'>{ `${isTime()}`}</span>
                                            <span className='mod-options' onClick={deleteArticleComments}>
                                            
                                                <i className='ion-trash-a'></i>
                                            </span>
                                           
                                        </div>
                                </div>
                            )
                        }) }
                        
                       
                          
                      
                </div>
                )


            }
            
           
        

    useEffect(() => {
       

        doFetch()
        doFetchComments()
       
        
    },[doFetch])

    useEffect(() => {
        doFetchComments1() 
        
     },[fetchArticleResponseComments])
    
  
    return (
        <div className='article-page'>
            <div className='banner'>
                {!fetchArticleLoading && fetchArticleResponse &&  (
                    <div className='container'>
                        <h1>{fetchArticleResponse.article.title}</h1>
                        <div className='article-meta'>
                            <Link to={`/propfiles/${fetchArticleResponse.article.author.username}`}>
                                <img src={fetchArticleResponse.article.author.image} alt=''/>
                            </Link>
                            <div className='info'>
                                <Link to={`/propfiles/${fetchArticleResponse.article.author.username}`}>
                                    {fetchArticleResponse.article.author.username}
                                </Link>
                                <span className='date'>{fetchArticleResponse.article.createdAt}</span>
                                
                            </div>
                            {isAuthor() && (
                                <span>
                                    <Link to={`/articles/${fetchArticleResponse.article.slug}/edit`} className='btn btn-outline-secondary btn-sm' >
                                       <i className='ion-edit'></i>
                                        Edit Article
                                    </Link>
                            
                           
                                <button onClick={deleteArticle} className='btn btn-outline-danger btn-sm' >
                                <i className='ion-trash-a'></i>
                                    Delete Article
                                </button>
                                </span>
                            )}
                            
                        </div>
                    </div>
                )}
            </div>
            <div className='container page'>
                {fetchArticleLoading && <div>Loading...</div>}
                {fetchArticleError && <div>Sometimes errors happend</div>}
                {!fetchArticleLoading && fetchArticleResponse && (
                    
                    <Fragment>
                    <div className='row article-content'>
                        <div className='col-xs-12'>
                            <div>
                                <p>{fetchArticleResponse.article.body}</p>
                            </div>
                            <TagList tags={fetchArticleResponse.article.tagList}/>
                        </div>                        
                    </div>
                    <hr/>
                    <div className='article-actions'> </div>
                    <div className='row'>
                        <div className='col-xs-12 col-md-8 offset-md-2'>
                            <div>
                                <form className='card comment-form' onSubmit={handleSubmit}>
                                    <div className='card-block'>
                                        <textarea className=' form-control' placeholder='Write a comment..' row='3'
                                            value={body}
                                            onChange={e => setBody(e.target.value)}
                                         ></textarea>
                                    </div>
                                    <div className='card-footer'>
                                        <img src={fetchArticleResponse.article.author.image} alt='' className='comment-author-img'/>
                                        <button className='btn btn-sm btn-primary' type='submit'>Post Comment</button>
                                    </div>
                                </form>
                            </div>
                           <Comments
                           fetchArticleResponseComments ={fetchArticleResponseComments1}
                          
                            doFetchComments ={doFetchComments}
                            apiURL ={apiURL}
                            isSuccessfull ={isSuccessfull}
                            setIsSuccesfull ={setIsSuccesfull}
                            setBody ={setBody}
                            />
                        </div>
                    </div>
                    </Fragment>
                    
                )}
            </div>
           
        </div>
    )
}
export default Article