import React, { Fragment, useEffect, useState,useContext} from 'react'
import {Redirect }from 'react-router-dom'
import * as R from 'ramda';

import ArticleForm from 'components/articleForm'
import useFetch from 'hooks/useFetch'
import {CurrentUserContext} from 'contexts/currentUser'

const EditArticle =({match}) => {
    const slug = match.params.slug
    const apiURL =  `/articles/${slug}`

    const [currentUserState] = useContext(CurrentUserContext)
    const [{response: fetchArticleResponse}, doFetchArticle] = useFetch(apiURL)
    const [{response: updateArticleResponse, error: updateArticleError},
         doUpdateArticle
        ] = useFetch(apiURL)

        const [initialValues, setInitialValues] = useState(null)
        const [isSuccessfullSubmit, setIsSuccesfullSubmit] = useState(false)

    const handleSubmit = article =>{
      
        doUpdateArticle({
            method: 'put',
            data: {
                article
            }
        })
        
    }

    useEffect(()=>  {
        doFetchArticle()
        
    },[doFetchArticle])

    useEffect(() => {
        if (!fetchArticleResponse) {
            return
        }
        const  fetch = R.pick(['title', 'description', 'body', 'tagList'], fetchArticleResponse.article)
        console.log('has',fetch)
        setInitialValues(fetch)
        
       
    },[fetchArticleResponse])

    useEffect(()=>  {
        if (!updateArticleResponse) {
            return
        }
        setIsSuccesfullSubmit(true)
        
    },[updateArticleResponse])

    

    if(isSuccessfullSubmit) {
         
        return   <Redirect to={`/articles/${slug}`}/>
    }
    if (!currentUserState.isLogged) {
        return <Redirect to='/'/>
    }
    
    return ( 
        <Fragment>
              {currentUserState.isLogged && 
                        <ArticleForm
                        onSubmit={handleSubmit}
                        errors={(updateArticleError && updateArticleError.errors) || {}}
                        initialValues={initialValues}
        />}
        </Fragment>
      
    )
}

export default EditArticle 