import React, {useEffect, useRef, useState,useContext} from 'react'
import {Link, Redirect} from 'react-router-dom'
import useLocalStorage from 'hooks/useLocalStorage'

import useFetch from 'hooks/useFetch'

import {CurrentUserContext} from 'contexts/currentUser'
import BackendErrorMessages from 'pages/authenticaion/components/backendErrorMessadge';

const Authentication = props => {
    const isLogin =props.match .path === '/login'
    const pageTitle = isLogin ? 'Sign In' : 'Sign Up'
    const descriptionPath = isLogin ? '/users/login': '/users'
    const descriptionLink = !isLogin ? '/login' : '/register'
    const descriptionText = isLogin ? 'Need an account?' : 'Have an account'
    // const apiURL = isLogin ? `/users/login`: '/users'
    const [email, setEmail] = useState('')
    
    const [password, setPassword] = useState('')

    const [username, setUsername] = useState('')


    // const [getModal, setModal] = useState(false)

    const [isSuccessfullSubmit, setIsSuccesfullSubmit] = useState(false)

    const [token, setToken] = useLocalStorage('token')

    const [tokenName, setTokenName] = useLocalStorage('tokenName')

    const [currentUserState, setCurrentUserState] = useContext(CurrentUserContext)
    // const emailRef = useRef(null)
    const [{response, isLoading, error}, doFetch] = useFetch(descriptionPath)

    console.log('currentUserState',currentUserState)
 

    const handleSubmit = event => {
     
        event.preventDefault()
               

        const user = isLogin ? {email,password} : {email,password,username}
        // console.log('reffff',emailRef.current.value,password)
        doFetch({
            method: 'post',
        data: {
          user
        }
        }) 
          
        // if (isLogin) {
        
        //     setModal(true)  
        //  }
        } 
        
        useEffect(() => {
            if(!response) {
                return
            }
            
            setToken(response.user.token)
            setTokenName(response.user.username)
            setIsSuccesfullSubmit(true)
            setCurrentUserState(state => ({
                ...state,
                isLogged: true,
                isLoading: false,
                currentUser:response.user
            }))
        },[response,setToken,setCurrentUserState])

        if(isSuccessfullSubmit) {
         
            return   <Redirect to='/'/>
        }
        
    return (
        <div className='auth-page'>
            <div className='container page'>
                <div className='row'>
                    <div className='col-md-6 offset-md-3 col-xs-12'>
                        <h1 className='text-xs-center'>{pageTitle}</h1>
                        <div className='text-xs-center'>
                            <Link to={descriptionLink} className='nav-link'>
                            {descriptionText}
                            </Link>
                        </div>
                      
                        <form onSubmit={handleSubmit}>
                            {error && <BackendErrorMessages backendErrors={error.errors}/>}
                            <fieldset>
                                { !isLogin &&
                                <fieldset className='form-group'>
                                    <input
                                        type='text'
                                        className='form-control form-control-lg'
                                        placeholder='Username'
                                        value={username}
                                        onChange={e => setUsername(e.target.value)}
                                        // ref={emailRef}
                                    />                                    
                                </fieldset>
                                }
                                <fieldset className='form-group'>
                                    <input
                                        type='email'
                                        className='form-control form-control-lg'
                                        placeholder='Email'
                                        value={email}
                                        onChange={e => setEmail(e.target.value)}
                                        // ref={emailRef}
                                    />
                                </fieldset>
                                <fieldset className='form-group'>
                                    <input
                                        type='current-password'
                                        className='form-control form-control-lg'
                                        placeholder='Password'
                                        value={password}
                                        onChange={e => setPassword(e.target.value)}
                                    />
                                </fieldset>
                                <button
                                    className='btn btn-lg btn-primary pull-xs-right'
                                    type='submit'
                                    disabled={isLoading}
                                >
                                    {pageTitle}
                                </button>
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    )
}

export default Authentication